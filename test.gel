// const i int = j // depends j
const j = 12 // depends none

let arr [heap; int] // depends int

const d Depends

struct Depends {
    a int
}

func main(args [string]) -> Optional(error) { // depends Optional, error    
    libc.Printf(c("%s"), args.0) // depends libc, Printf, c_string
    return None // depends type_of(main).return_type
}

variant Optional (V #type = Depends) {
    Some(V),
    None,
}

func c_string(from #string) -> [from.length+1; u8] { // depends from

    PushAllocator(temporary_allocator) // depends PushAllocator, temporary_allocator

    match cstr = Allocate(from.length+1) { // depends Allocate, from, type_of(Allocate).return_type
        Ok       => CopyBytes(from.length, from.data, cstr) // depends CopyBytes, from, cstr
        Err(err) => panic(err) // depends none
    }

    cstr.(from.length) = 0 // depends cstr, from
}