const i int = j
const j = 12

let arr [heap; int]

const d Pointer(int)

variant Pointer (T #type = void) {
    To ( *T ),
    Null,
}

const m type_of(main) = c_string

func main(args [string]) -> Optional(error) { // depends Optional, error    
    libc.Printf(c("%s"), args.0) // depends libc, Printf, c_string
    return None // depends type_of(main).return_type
}

variant Optional (V #type) {
    Some(V),
    None,
}

func c_string(from #string) -> [from.length+1; u8] { // depends from

    PushAllocator(temporary_allocator) // depends PushAllocator, temporary_allocator

    // todo make it const
    match cstr = Allocate(from.length+1) { // depends Allocate, from, type_of(Allocate).return_type

        Ok(ptr)  => CopyRawBytes(from.length, from.data, ptr) // depends CopyBytes, from, cstr, ptr, raw

        Err(err) => panic(err) // depends none
    }

    cstr.(from.length) = 0 // depends cstr, from
}
